"""
Вам на вход приходит последовательность целых чисел. Вам надо обрабатывать ее
следующим образом: выводить на экран сумму первых пяти чисел этой
последовательности, затем следующих 5 итд

Но последовательность не дается вам сразу целиком. С течением времени к вам
поступают её последовательные части. Например, сначала первые три элемента,
потом следующие шесть, потом следующие два и т. д.

Реализуйте класс Buffer, который будет накапливать в себе элементы
последовательности и выводить сумму пятерок последовательных элементов по мере
их накопления.

Одним из требований к классу является то, что он не должен хранить в себе больше
элементов, чем ему действительно необходимо, т. е. он не должен хранить
элементы, которые уже вошли в пятерку, для которой была выведена сумма.

Класс должен иметь следующий вид:

class Buffer:
    def __init__(self):
        # конструктор без аргументов

    def add(self, *a):
        #          ^-- можно выбрать любое имя параметра
        # добавить следующую часть последовательности

    def get_current_part(self):
        # вернуть сохраненные в текущий момент элементы последовательности в
        # порядке, в котором они были добавлены

source: https://github.com/mipt-cs/course-advanced_python/blob/master/content/lab05.1.rst#id6
"""


class Buffer:
    """..."""

    ### ваше решение: ###
class Buffer:
    def __init__(self):
        self.current_part = []
 
    def add(self, *a):
        for number in a:
            self.current_part.append(number)
            if len(self.current_part) >= 5:
                self.sum_and_print()
 
    def get_current_part(self):
        return self.current_part
 
    def sum_and_print(self):
        if len(self.current_part) >= 5:
            print(sum(self.current_part[:5]))
            self.current_part = self.current_part[5:]


### конец решения ###
buf = Buffer()
buf.add(1, 2, 3)
buf.add(4, 5, 6, 7, 8, 9)
buf.add(10, 11)
print(buf.get_current_part())  # Вывод: [10, 11]


    ### конец решения ###
